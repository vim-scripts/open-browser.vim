*openbrowser.txt* *openbrowser* *open-browser*

Author:
  tyru <tyru.exe@gmail.com>
Version: 0.0.2
License: Under the same license as Vim itself (see :help license)

==============================================================================
CONTENTS						*openbrowser-contents*

Introduction		|openbrowser-introduction|
Interface			|openbrowser-interface|
  Keymappings		|openbrowser-keymappings|
  Variables			|openbrowser-variables|
  Commands			|openbrowser-commands|
  Functions			|openbrowser-functions|
Library to enhance open-browser		|openbrowser-library|
Platform dependent values		|openbrowser-platform-dependent|
Changelog			|openbrowser-changelog|


==============================================================================
INTRODUCTION						*openbrowser-introduction* {{{

>
	nmap map-you-like <Plug>(openbrowser-open)
	vmap map-you-like <Plug>(openbrowser-open)

	" In command-line
	:OpenBrowser http://google.com/
<

}}}
==============================================================================
INTERFACE				*openbrowser-interface* {{{
------------------------------------------------------------------------------
KEYMAPPINGS					*openbrowser-keymappings* {{{

n <Plug>(openbrowser-open)				|<Plug>(openbrowser-open)|
	Open current <cfile> text with |:OpenBrowser|.

v <Plug>(openbrowser-open)				|<Plug>(openbrowser-open)|
	Open selected text with |:OpenBrowser|.

}}}
------------------------------------------------------------------------------
VARIABLES					*openbrowser-variables* {{{

g:openbrowser_open_commands			*g:openbrowser_open_commands*
								(default: Platform dependent)
	See |openbrowser-platform-dependent|.

g:openbrowser_open_rules			*g:openbrowser_open_rules*
								(default: Platform dependent)
	See |openbrowser-platform-dependent|.

g:openbrowser_fix_schemes			*g:openbrowser_fix_schemes*
								(default: {"ttp": "http"})
	You can use this variable if you installed |urilib|.
	See |openbrowser-library|.

	If this value is default,
	If you execute |<Plug>(openbrowser-open)| on URI like: >
		ttp://google.com/
<	It is fixed to: >
		http://google.com/
<
	I think |g:openbrowser_fix_hosts| and
	|g:openbrowser_fix_paths| are not so helpful.
	But |g:openbrowser_fix_schemes| might be helpful particularly on Japan.
	Because "ttp" is used as like "http" on particular net community.
	(I know it's desecration of standard
	but I'm particular member and this is my plugin :) )

	It is not interesting for almost people
	and default value of |g:openbrowser_fix_schemes| would not
	bother you.

g:openbrowser_fix_hosts				*g:openbrowser_fix_hosts*
								(default: {})
	You can use this variable if you installed |urilib|.
	See |openbrowser-library|.

	If this value is: >
	{'google.com': 'yahoo.com'}
<
	If you execute |<Plug>(openbrowser-open)| on URI like: >
		http://google.com/
<	It is fixed to: >
		http://yahoo.com/
<
g:openbrowser_fix_paths				*g:openbrowser_fix_paths*
								(default: {})
	You can use this variable if you installed |urilib|.
	See |openbrowser-library|.

	If this value is: >
	{'/google': '/tyru'}
<
	If you execute |<Plug>(openbrowser-open)| on URI like: >
		http://twitter.com/google
<	It is fixed to: >
		http://twitter.com/tyru
<
	Note that this works on the URL like: >
		http://yahoo.com/google
<	It is fixed to: >
		http://yahoo.com/tyru
<
g:openbrowser_isfname				*g:openbrowser_isfname*
								(default: Same as 'isfname')
	|<Plug>(openbrowser-open)| opens <cfile> text in normal mode.
	This variable temporarily changes 'isfname' option value at that time.

g:openbrowser_default_search		*g:openbrowser_default_search*
								(default: "google")
	Key of Dictionary |g:openbrowser_search_engines|.
	See |g:openbrowser_search_engines| , |:OpenBrowserSearch|,
	|OpenBrowserSearch()|.

g:openbrowser_search_engines		*g:openbrowser_search_engines*
								(default: See below)
	Default value is: >
    let g:openbrowser_search_engines = {
    \   'google': 'http://google.com/search?q={query}',
    \   'yahoo': 'http://search.yahoo.com/search?p={query}',
    \}
<
	As default, supported search engines are Google and Yahoo.
	You can add favorite search engines like: >
    let g:openbrowser_search_engines = {
    \   'favorite': 'http://example.com/search?q={query}',
    \}
<	{query} will be replaced with given query.

}}}
------------------------------------------------------------------------------
COMMANDS					*openbrowser-commands* {{{

:OpenBrowser {uri}				*:OpenBrowser*
	Opens URI with your favorite browser.

:OpenBrowserSearch [-{search-engine}] {query}		*:OpenBrowserSearch*
	{query}: Query string
	{search-engine}: >
		:OpenBrowserSearch -yahoo word
<	This opens http://search.yahoo.com/search?p=word as default.
	You can change this URI with |g:openbrowser_search_engines|.


}}}
------------------------------------------------------------------------------
FUNCTIONS						*openbrowser-functions* {{{

OpenBrowser({uri})				*OpenBrowser()*
	Function version of |:OpenBrowser|.

OpenBrowserSearch({query} [, {search-engine}])		*OpenBrowserSearch()*
	Function version of |:OpenBrowserSearch|.
	If {search-engine} is omitted,
	|g:openbrowser_default_search| is used instead.

}}}
}}}
==============================================================================
LIBRARY TO ENHANCE OPEN-BROWSER		*openbrowser-library* {{{

urilib.vim: http://github.com/tyru/urilib.vim

If you installed |urilib|, you can use these variables:
- |g:openbrowser_fix_schemes|
- |g:openbrowser_fix_hosts|
- |g:openbrowser_fix_paths|

}}}
==============================================================================
PLATFORM DEPENDENT VALUES		*openbrowser-platform-dependent* {{{

Cygwin:
	Match if: `has("win32unix")` is true.

	g:openbrowser_open_commands g:openbrowser_open_rules ~
	["cygstart"]				{"cygstart": "{browser} {shellescape(uri)}"}

Mac OS X:
	Match if: `has("macunix")` is true.

	g:openbrowser_open_commands g:openbrowser_open_rules ~
	["open"]					{"open": "{browser} {shellescape(uri)}"}

MS Windows:
	Match if: `has("win16") || has("win32") || has("win64")` is true.

	Note that "start" is not external program,
	it is cmd.exe builtin command.
	But you don't have to care it is not executable,
	because open-browser knows "start" is builtin command.

	g:openbrowser_open_commands g:openbrowser_open_rules ~
	["start"]					{"start": "&shell &shellcmdflag {browser} {uri}"}

Unix like environment:
	Match if:
	it does not match above any environment,
	and `has("unix")` is true,
	This is your platform.

	|g:openbrowser_open_commands|
	['xdg-open', 'x-www-browser', 'firefox', 'w3m']

	|g:openbrowser_open_rules| >
	{
	\   'xdg-open':      '{browser} {shellescape(uri)}',
	\   'x-www-browser': '{browser} {shellescape(uri)}',
	\   'firefox':       '{browser} {shellescape(uri)}',
	\   'w3m':           '{browser} {shellescape(uri)}',
	\}
<

}}}
==============================================================================
CHANGELOG						*openbrowser-changelog* {{{

0.0.0:
- Initial upload

0.0.1:
- Support opening file path.
- Fix minor bugs.

0.0.2:
- Rename |g:openbrowser_isfname| to |g:openbrowser_iskeyword|.
variable |g:openbrowser_isfname| is still available for
backward compatibility.
- Specialize |g:openbrowser_iskeyword| value to get URI in <cword>.
- More readable messages.

0.0.3:
- Implement g:openbrowser_default_search.
- Implement g:openbrowser_search_engines.
- Implement g:openbrowser_open_filepath_in_vim.
- Implement g:openbrowser_open_vim_command.
- Separate plugin/openbrowser.vim to autoload/openbrowser.vim to save the memory.
- Bundle urilib.vim (autoload/urilib.vim)
- Fix bug: openbrowser should open URI which has no scheme
  (e.g.: example.com)

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=4:ft=help:norl:noet:fdm=marker:fen
